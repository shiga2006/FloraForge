if True:
    from reset_random import reset_random

    reset_random()
import os
import pickle
import sys

import numpy as np
from PyQt5.QtCore import Qt, QThreadPool
from PyQt5.QtGui import QFont, QImage, QPixmap
from PyQt5.QtWidgets import (QWidget, QApplication, QVBoxLayout, QGroupBox, QGridLayout, QLineEdit, QPushButton,
                             QFileDialog, QMessageBox, QLabel, QScrollArea, QDialog, QProgressBar, QComboBox)


import cv2
from preprocess import preprocess
from recommend import PESTICIDES
from segment import segment
from feature_extractor import (SHAPE, get_InceptionV3_mdl, get_EfficientNetB2_mdl, get_feature, 
                                get_image_to_predict, get_feature_map_model, get_feature_image)
from unetpp import UNetPP
from utils import CLASSES, Worker
from model import build_ACGRU
import cmapy


class AerialSceneClassification(QWidget):
    def _init_(self):
        super(AerialSceneClassification, self)._init_()

        self.setWindowTitle('Corn Disease Classification')
        self.setWindowFlags(Qt.WindowCloseButtonHint | Qt.WindowMinimizeButtonHint)
        self.setWindowState(Qt.WindowMaximized)

        self.app_width = QApplication.desktop().availableGeometry().width()
        self.app_height = QApplication.desktop().availableGeometry().height()

        self.main_layout = QVBoxLayout()
        self.main_layout.setAlignment(Qt.AlignCenter | Qt.AlignTop)

        self.gb_1 = QGroupBox('Input Data')

        self.gb_1.setFixedWidth((self.app_width // 100) * 99)
        self.gb_1.setFixedHeight((self.app_height // 100) * 16)
        self.grid_1 = QGridLayout()
        self.grid_1.setSpacing(10)
        self.gb_1.setLayout(self.grid_1)

        self.ip_le = QLineEdit()
        self.ip_le.setFixedWidth((self.app_width // 100) * 25)
        self.ip_le.setFocusPolicy(Qt.NoFocus)
        self.grid_1.addWidget(self.ip_le, 0, 0)

        self.ci_pb = QPushButton('Choose Input Image')
        self.ci_pb.clicked.connect(self.choose_input)
        self.grid_1.addWidget(self.ci_pb, 0, 2)

        self.pp_btn = QPushButton('Preprocess')
        self.pp_btn.clicked.connect(self.preprocess_thread)
        self.grid_1.addWidget(self.pp_btn, 0, 3)

        self.seg_btn = QPushButton('Segment')
        self.seg_btn.clicked.connect(self.segment_thread)
        self.grid_1.addWidget(self.seg_btn, 0, 4)

        self.fe_btn = QPushButton('Feature Extraction')
        self.fe_btn.clicked.connect(self.fe_thread)
        self.grid_1.addWidget(self.fe_btn, 0, 5)

        self.cls_btn = QPushButton('Classify')
        self.cls_btn.clicked.connect(self.classify_thread)
        self.grid_1.addWidget(self.cls_btn, 0, 6)

        self.gb_2 = QGroupBox('Results')
        self.gb_2.setFixedWidth((self.app_width // 100) * 99)
        self.gb_2.setFixedHeight((self.app_height // 100) * 75)
        self.grid_2_scroll = QScrollArea()
        self.gb_2_v_box = QVBoxLayout()
        self.grid_2_widget = QWidget()
        self.grid_2 = QGridLayout(self.grid_2_widget)
        self.grid_2_scroll.setWidgetResizable(True)
        self.grid_2_scroll.setWidget(self.grid_2_widget)
        self.gb_2_v_box.addWidget(self.grid_2_scroll)
        self.gb_2_v_box.setContentsMargins(0, 0, 0, 0)
        self.gb_2.setLayout(self.gb_2_v_box)

        self.main_layout.addWidget(self.gb_1)
        self.main_layout.addWidget(self.gb_2)
        self.setLayout(self.main_layout)
        self._input_image_path = ''
        self.pp_data = {}
        self.feature = []
        self.class_ = {}
        self._image_size = ((self.gb_2.height() // 100) * 90, (self.app_width // 100) * 45)
        self.index = 0
        self.load_screen = Loading()
        self.thread_pool = QThreadPool()
        self.disable()
        self.show()

    def choose_input(self):
        self.reset()
        self._input_image_path, _ = QFileDialog.getOpenFileName(
            self,
            caption="Choose Input Image", directory='Data/source',
            options=QFileDialog.DontUseNativeDialog,
            filter="JPG Files (.JPG);;BMP Files (.bmp);;PNG Files (*.PNG)"
        )
        if os.path.isfile(self._input_image_path):
            self.ip_le.setText(self._input_image_path)
            self.add_image(self._input_image_path, 'Input Image')
            self.ci_pb.setEnabled(False)
            self.pp_btn.setEnabled(True)
        else:
            self.show_message_box('InputImageError', QMessageBox.Critical, 'Choose valid image?')

    def preprocess_thread(self):
        worker = Worker(self.preprocess_runner)
        self.thread_pool.start(worker)
        worker.signals.finished.connect(self.preprocess_finisher)
        self.load_screen.setWindowModality(Qt.ApplicationModal)
        self.load_screen.show()
        self.pp_btn.setEnabled(False)

    def preprocess_runner(self):
        reset_random()
        self.pp_data = {'Preprocessed Image': preprocess(self._input_image_path)}

    def preprocess_finisher(self):
        for k in self.pp_data:
            cv2.imwrite('x.jpg', self.pp_data[k])
            self.add_image('x.jpg', k)
        self.load_screen.close()
        self.seg_btn.setEnabled(True)

    def segment_thread(self):
        worker = Worker(self.segment_runner)
        self.thread_pool.start(worker)
        worker.signals.finished.connect(self.segment_finisher)
        self.load_screen.setWindowModality(Qt.ApplicationModal)
        self.load_screen.show()
        self.seg_btn.setEnabled(False)

    def segment_runner(self):
        reset_random()
        model = UNetPP()
        model.load_weights('models/unetpp/model.h5')
        mask = segment('x.jpg', model)
        img = cv2.imread('x.jpg')
        segmented = cv2.bitwise_and(img, img, mask=mask)
        self.seg_data = {
            'Mask': mask,
            'Segmented': segmented
        }

    def segment_finisher(self):
        for k in self.seg_data:
            cv2.imwrite('x.jpg', self.seg_data[k])
            self.add_image('x.jpg', k)
        self.load_screen.close()
        self.fe_btn.setEnabled(True)

    def fe_thread(self):
        worker = Worker(self.fe_runner)
        self.thread_pool.start(worker)
        worker.signals.finished.connect(self.fe_finisher)
        self.load_screen.setWindowModality(Qt.ApplicationModal)
        self.load_screen.show()
        self.fe_btn.setEnabled(False)

    def fe_runner(self):
        reset_random()
        iv3 = get_InceptionV3_mdl()
        eb2 = get_EfficientNetB2_mdl()

        iv3_fmm = get_feature_map_model(iv3)
        eb2_fmm = get_feature_map_model(eb2)

        iv3_im = get_image_to_predict('x.jpg')
        eb2_im = get_image_to_predict('x.jpg')

        iv3_fe = get_feature(iv3_im, iv3)
        eb2_fe = get_feature(eb2_im, eb2)
        iv3_eb2_fe = [*iv3_fe, *eb2_fe]

        self.feature = iv3_eb2_fe

        iv3_fm = get_feature_image(iv3_im, iv3_fmm)
        eb2_fm = get_feature_image(eb2_im, eb2_fmm)

        iv3_fm = cv2.resize(iv3_fm, SHAPE[:-1])
        eb2_fm = cv2.resize(eb2_fm, SHAPE[:-1])

        iv3_fm = cv2.applyColorMap(iv3_fm, cmapy.cmap('viridis_r'))
        eb2_fm = cv2.applyColorMap(eb2_fm, cmapy.cmap('viridis_r'))

        cv2.imwrite('x.jpg', iv3_fm + eb2_fm)

    def fe_finisher(self):
        self.add_image('x.jpg', 'Feature Map')
        self.load_screen.close()
        self.cls_btn.setEnabled(True)

    def classify_thread(self):
        worker = Worker(self.classify_runner)
        self.thread_pool.start(worker)
        worker.signals.finished.connect(self.classify_finisher)
        self.load_screen.setWindowModality(Qt.ApplicationModal)
        self.load_screen.show()

    def classify_runner(self):
        reset_random()
        feature = np.array(self.feature, ndmin=2)
        with open('Data/ss.pkl', 'rb') as f:
            ss = pickle.load(f)
            feature = ss.transform(feature)
        x = np.expand_dims(feature, axis=1)
        model = build_ACGRU(x.shape[1:], len(CLASSES))
        model.load_weights('models/acgru/model.h5')
        prob = model.predict(x, verbose=False)
        pred = np.argmax(prob, axis=1)[0]
        cp = prob[0][pred]
        cls = CLASSES[pred]
        # self.class_ = 'Classified As :: {0}({1:.4f})'.format(cls, cp)
        self.class_ = 'Classified As :: {0}'.format(cls)
        # cp = int(cp * 100)
        # if cls != 'Healthy':
        #     pests = PESTICIDES[cls]
        #     ranges = [r for r in range(0, 100, 100 // len(pests))] + [100]
        #     for i, r in enumerate(ranges):
        #         if cp in range(r, ranges[i+1]):
        #             self.class_ += '\nRecommended Pesticide :: {0}'.format(pests[i])
        #             break
        # else:
        #     self.class_ += '\nNo Recommendation For Healthy Leaves'

    def classify_finisher(self):
        self.add_image(self.input_image_path, self.class)
        os.remove('x.jpg')
        self.cls_btn.setEnabled(False)
        self.ci_pb.setEnabled(True)
        self.load_screen.close()

    @staticmethod
    def clear_layout(layout):
        while layout.count() > 0:
            item = layout.takeAt(0)
            if not item:
                continue
            w = item.widget()
            if w:
                w.deleteLater()

    @staticmethod
    def show_message_box(title, icon, msg):
        msg_box = QMessageBox()
        msg_box.setWindowTitle(title)
        msg_box.setText(msg)
        msg_box.setIcon(icon)
        msg_box.setDefaultButton(QMessageBox.Ok)
        msg_box.setWindowModality(Qt.ApplicationModal)
        msg_box.exec_()

    def add_image(self, im_path, title):
        image_lb = QLabel()
        image_lb.setFixedHeight(self._image_size[0])
        image_lb.setFixedWidth(self._image_size[1])
        image_lb.setScaledContents(True)
        image_lb.setStyleSheet('padding-top: 30px;')
        qimg = QImage(im_path)
        pixmap = QPixmap.fromImage(qimg)
        image_lb.setPixmap(pixmap)
        self.grid_2.addWidget(image_lb, 0, self.index, Qt.AlignCenter)
        txt_lb = QLabel(title)
        self.grid_2.addWidget(txt_lb, 1, self.index, Qt.AlignCenter)
        self.index += 1

    def disable(self):
        self.ip_le.clear()
        self.class_ = None
        self._input_image_path = ''
        self.ci_pb.setEnabled(True)
        self.pp_btn.setEnabled(False)
        self.seg_btn.setEnabled(False)
        self.fe_btn.setEnabled(False)
        self.cls_btn.setEnabled(False)
        self.pp_data = {}
        self.seg_data = {}
        self.feature = []

    def reset(self):
        self.disable()
        self.clear_layout(self.grid_2)


class Loading(QDialog):
    def _init_(self, parent=None):
        super(Loading, self)._init_(parent)
        self.screen_size = app.primaryScreen().size()
        self._width = int(self.screen_size.width() / 100) * 40
        self._height = int(self.screen_size.height() / 100) * 5
        self.setGeometry(0, 0, self._width, self._height)
        x = (self.screen_size.width() - self.width()) // 2
        y = (self.screen_size.height() - self.height()) // 2
        self.move(x, y)
        self.setWindowFlags(Qt.CustomizeWindowHint)
        self.pb = QProgressBar(self)
        self.pb.setFixedWidth(self.width())
        self.pb.setFixedHeight(self.height())
        self.pb.setRange(0, 0)


if _name_ == '_main_':
    app = QApplication([sys.argv])
    app.setStyle('fusion')
    app.setFont(QFont('JetBrains Mono', 8))
    builder = AerialSceneClassification()
    sys.exit(app.exec_())