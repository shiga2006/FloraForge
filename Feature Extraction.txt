import glob
import os
import cv2
import numpy as np
import tqdm
#from unetpp import UNetPP, IMG_SHAPE
 

def segment(path, mdl):
    IMG_SHAPE = (128, 128, 1)
    img_ = cv2.imread(path, 0) 
    img_shape = img_.shape
    img_ = cv2.resize(img_, IMG_SHAPE[:-1])
    img_ = np.expand_dims(img_, axis=-1)
    img_ = np.array([img_], ndmin=2).astype(np.float32)
    pred = (mdl.predict(img_) > 0.2) * 1
    pred = pred[0]
    pred[pred > 0] = 255
    pred = pred.astype(np.uint8)
    pred = cv2.resize(pred, img_shape[::-1])
    return pred
 

if __name__ == '__main__':
    PREPROCESSED_PATH = r'C:\archive\Gaussian_Preprocessed'
    SEGMENTED_PATH = r'C:\archive\Segemented'
    os.makedirs(SEGMENTED_PATH, exist_ok=True)
    model = UNetPP()
    model.load_weights(r'C:\archive\model.h5')
    CLASSES = ["Blight","Common_Rust","Gray_Leaf_Spot","Healthy"]
    for cls in CLASSES:
        images_list = sorted(glob.glob(os.path.join(PREPROCESSED_PATH, cls, '*.JPG')))
        save_path = os.path.join(SEGMENTED_PATH, cls)
        os.makedirs(save_path, exist_ok=True)
        for img_path in tqdm.tqdm(images_list, desc='[INFO] Segmenting Class => {0} :'.format(cls)):
            mask = segment(img_path, model)
            img = cv2.imread(img_path)
            segmented = cv2.bitwise_and(img, img, mask=mask)
            cv2.imwrite(os.path.join(save_path, os.path.basename(img_path)), segmented)